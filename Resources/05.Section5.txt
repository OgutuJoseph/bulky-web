Section 5: Repository Pattern


70. IRepository Interface
• 



71. Implement Repository Interface
• 



72. Implement ICategory Repository
• 



73. Implement Category Repository
• 



74. Replace DbContext with Category Repository

[Below error purposely shown to illustrate how to overcome]
-> Whenever you encouter an error `InvalidOperationException: Unable to resolve service for type ...`
    - First thing to come to mind should be there is some issue with registering the service to the container.

    :: To solve (on browser)
    An unhandled exception occurred while processing the request.
    InvalidOperationException: Unable to resolve service for type 'Bulky.DataAccess.Repository.IRepository.ICategoryRepository' while attempting to activate 'BulkyWeb.Controllers.CategoryController'.

    :: Add below to Program.cs
    builder.Services.AddScoped<ICategoryRepository, CategoryRepository>();

    ^ scoped is used, 
        -> because most common
        -> so that for one request, it will use the same service



75. How Easy is it to move to a Different Database?
• 



76. Renaming Project and Solving Issues
• 



77. UnitOfWork Implementation
• 



78. UnitOfWork in Action
• 



79. Areas in .NET
- Can help with segmenting different sections of a web project e.g., client and admin side.
- Steps
    -> Right click 'BulkyBookWeb'
    -> Select 'New Scaffolded Item'
    -> Choose 'MVC Area' >> Name 'Admin'
    // 
    -> Choose 'MVC Area' >> Name 'Customer'

    -> Go to Program.cs >> change
    ::
    app.MapControllerRoute(
	    name: "default",
	    pattern: "{controller=Home}/{action=Index}/{id?}");

    to
    ::
    app.MapControllerRoute(
	    name: "default",
	    pattern: "{area:exists}/{controller=Home}/{action=Index}/{id?}");

    e.g.
    ::
    app.MapControllerRoute(
	    name: "default",
	    pattern: "{area=Customer}/{controller=Home}/{action=Index}/{id?}");

        ^^ replace area:[areaname] with area=[areaname]

- Since we have Models and Data in the individual projects within the solution, you can Delete
    -> Areas/Admin/Data && Areas/Admin/Models
    -> Areas/Custmer/Data && Areas/Customer/Models

- Move 
    -> 'CategoryController' to 'Areas/Admin/Controllers'
    -> 'HomeController' to 'Areas/Customer/Controllers'

- To specify the area in which a controller belongs to, 
    -> Add [Area("AreaName")] on top of public class (below namespace)
    -> E.g. [Area("Admin")]

- Move 
    -> BulkyBookWeb/Views/[Category] to BulkyBookWeb/Areas/Admin/Views/[Category]
    -> BulkyBookWeb/Views/[Home] to BulkyBookWeb/Areas/Customer/Views/[Home]

- !COPY!
    -> both
    ::
    BulkyBookWeb/Views/_ViewImports.cshtml && BulkyBookWeb/Views/_ViewStart.cshtml

    to
    :: 
    BulkyBookWeb/Areas/Admin/Views/
    BulkyBookWeb/Areas/Customer/Views/

- For routing across areas, in navbar for e.g. (BulkyBookWeb/Views/Shared/_Layout.cshtml), 
    -> add asp-area="Admin" to link that routes to 'Category'
    -> <a class="nav-link" asp-area="Admin" asp-area="" asp-controller="Category" asp-action="Index">Categories</a>

    :: Not necessary since 'the default' has been set in Program.cs, but you can also define
    -> <a class="nav-link" asp-area="Customer" asp-controller="Home" asp-action="Index">Home</a>
    -> <a class="nav-link" asp-area="Customer" asp-controller="Home" asp-action="Privacy">Privacy</a>


80. Dropdown in Navbar
- To remove the blue text-color on the nav links,
    -> Go to _Layout.cshtml.css
    -> Comment out the following as below
        /*a {
            color: #0077cc;
        }*/


