Section 4: N-Tier Architecture


63. Create More Projects
• In Bulky >> 
    1.  -> Right Click Solution >> Add Project
        -> Template :: Class library
        -> Project Name [Bulky.DataAccess] >> Select Project Dir
        -> Framework :: .NET 6.0 (Long Term Support)
        :: To have everything related to database --> DbContect, Migrations

    2.  -> Right Click Solution >> Add Project
        -> Template :: Class library
        -> Project Name [Bulky.Models] >> Select Project Dir
        -> Framework :: .NET 6.0 (Long Term Support)
        :: To have all models

    3.  -> Right Click Solution >> Add Project
        -> Template :: Class library
        -> Project Name [Bulky.Utility] >> Select Project Dir
        -> Framework :: .NET 6.0 (Long Term Support)
        :: To have all utilities, e.g.,
            -Email functionalities
            -Constants for applications



64. Modify Styling Refresh
• 



65. Modify Styling
• 



66. Modify UI of Category Pages
• 



67. N-Tier Architecture
• In Bulky >> BulkyWeb
    1. 
        -> Select [Data]
        -> Cut >> Paste into [Bulky >> Bulky.DataAccess]

    2. 
        -> Select [Migrations]
        -> Cut >> Paste into [Bulky >> Bulky.DataAccess]
    
    3. 
        -> Select [Models]
        -> Cut >> Paste into [Bulky >> Bulky.Models]

• In Bulky >> Bulky.Utility 
    -> Add class, 'SD' (Standard Class)
    -> change 
        from    :: --> internal class SD
        to      :: --> public static class SD

• Manage NuGet Packages
    -> Bulky.DataAccess
        - Microsoft.EntityFrameworkCore [version 6.0.24]
        - Microsoft.EntityFrameworkCore.SqlServer [version 6.0.24] 
        - Microsoft.EntityFrameworkCore.Tools [version 6.0.24]

• Change Namespaces 
    -> Bulky.DataAccess 
        - ApplicationDbContext                          ::from:: namespace BulkyWeb.Data ::to:: namespace Bulky.DataAccess.Data
        - [All Migrations ON .cs && .designer.cs]       ::from:: namespace BulkyWeb.Migrations ::to:: namespace Bulky.DataAccess.Migrations


        - For ApplicationDbContext
        :: !!DON'T!! change using BulkyWeb.Models ::to:: using Bulky.Models
            -> Instead
            Right Click [Bulky.DataAccess]
            -> Add Project Reference
            Select [Bulky.Models] && [Bulky.Utility]

            then, `ctrl + .` on `Category` import `using Bulky.Models' *********Skipped on Project Reset*********

    -> Bulky.Models 
        - [Models > Category]                           ::from:: namespace BulkyWeb.Models ::to:: namespace Bulky.Models.Models
        ^^ You can move from above directory, to to root directory i.e., on Bulky.Models
        then namespace can be as
        :: namespace Bulky.Models

    -> BulkyWeb
        - CategoryController
            :: Remove
                using BulkyWeb.Data;
                using BulkyWeb.Models;
            :: Then
                `ctrl + .` ApplicationDbContext >> `Add reference to 'Bulky.DataAccess'`
                `ctrl + .` Category >> `using Bulky.Models`

        - HomeController
            `ctrl + .` ErrorViewModel >> `using Bulky.Models` 
        
        - Program.cs
            `ctrl + .` ApplicationDbContext >> `using Bulky.DataAccess.Data` 

        - [Views >> _ViewImports.cshtml]  --To clear all errors in views
            :: Replace
                @using BulkyWeb.Models
            :: With
                @using Bulky.Models



68. How to Reset Database
• 



69. Bonus - Dependency Injection Service Lifetimes
• Different Types of Dependency Injection Service Lifetimes
    -> Transient 
        - the simplest
        - the safest
        - whenever you want to use an object, you create it; you don't have to reuse an existing object i.e., any time a service is requested, a new implementation is created
        :: New Service - every time  requested

    -> scoped
        - depends on the http request
        - a lifetime created every time a http request is made to the server
        - e.g if a page load is calling a service ten times, it will only create the object once to be reused ten times for that request. When a new request is made a new object is created
        :: New Service - once per request

    -> signgleton
        - implementation is created for the lifetime of the app
        :: New Service - once per application lifetime

*^ Scoped most recommended for web applications


